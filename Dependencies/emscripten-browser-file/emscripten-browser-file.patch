diff --git forkSrcPrefix/emscripten_browser_file.h forkDstPrefix/emscripten_browser_file.h
index be9088d406c9bdd5388314a7367c193e376b4770..78d5456dee4ed46968f589e3b40a5dedf7a669f4 100644
--- forkSrcPrefix/emscripten_browser_file.h
+++ forkDstPrefix/emscripten_browser_file.h
@@ -1,18 +1,17 @@
 #ifndef EMSCRIPTEN_UPLOAD_FILE_H_INCLUDED
 #define EMSCRIPTEN_UPLOAD_FILE_H_INCLUDED
 
-#include <string>
 #include <emscripten.h>
 
 namespace emscripten_browser_file {
 
-using upload_handler = void(*)(std::string const&, std::string const&, std::string_view buffer, void*);
+using upload_handler = void(*)(char const *filename, char const *mime_type, char *buffer, size_t buffer_size, void*);
 
 EM_JS(void, upload, (char const *accept_types, upload_handler callback, void *callback_data = nullptr), {
   /// Prompt the browser to open the file selector dialogue, and pass the file to the given handler
   /// Accept-types are in the format ".png,.jpeg,.jpg" as per https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/accept
   /// Upload handler callback signature is:
-  ///   void my_handler(std::string const filename, std::string const &mime_type, std::string_view buffer, void *callback_data = nullptr);
+  ///   void my_handler(char const *filename, char const *mime_type, char *buffer, size_t buffer_size, void*);
   globalThis.open_file = function(e) {
     const file_reader = new FileReader();
     file_reader.onload = (event) => {
@@ -29,7 +28,6 @@ EM_JS(void, upload, (char const *accept_types, upload_handler callback, void *ca
     file_reader.mime_type = e.target.files[0].type;
     file_reader.readAsArrayBuffer(e.target.files[0]);
   };
-
   var file_selector = document.createElement('input');
   file_selector.setAttribute('type', 'file');
   file_selector.setAttribute('onchange', 'open_file(event)');
@@ -37,11 +35,6 @@ EM_JS(void, upload, (char const *accept_types, upload_handler callback, void *ca
   file_selector.click();
 });
 
-void upload(std::string const &accept_types, upload_handler callback, void *callback_data = nullptr) {
-  /// C++ wrapper for javascript upload call
-  upload(accept_types.c_str(), callback, callback_data);
-}
-
 EM_JS(void, download, (char const *filename, char const *mime_type, void const *buffer, size_t buffer_size), {
   /// Offer a buffer in memory as a file to download, specifying download filename and mime type
   var a = document.createElement('a');
@@ -50,18 +43,13 @@ EM_JS(void, download, (char const *filename, char const *mime_type, void const *
   a.click();
 });
 
-void download(std::string const &filename, std::string const &mime_type, std::string_view buffer) {
-  /// C++ wrapper for javascript download call, accepting a string_view
-  download(filename.c_str(), mime_type.c_str(), buffer.data(), buffer.size());
-}
-
 namespace {
 
 extern "C" {
 
 EMSCRIPTEN_KEEPALIVE int load_file_return(char const *filename, char const *mime_type, char *buffer, size_t buffer_size, upload_handler callback, void *callback_data) {
   /// Load a file - this function is called from javascript when the file upload is activated
-  callback(filename, mime_type, {buffer, buffer_size}, callback_data);
+  callback(filename, mime_type, buffer, buffer_size, callback_data);
   return 1;
 }
 
