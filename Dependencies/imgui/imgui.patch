diff --git forkSrcPrefix/misc/freetype/imgui_freetype.cpp forkDstPrefix/misc/freetype/imgui_freetype.cpp
index 03255326b2b63a8cbeb7c76bbf9ef28c69c0b633..f48e1a8e197594afecbad096b0c24812d4f88a40 100644
--- forkSrcPrefix/misc/freetype/imgui_freetype.cpp
+++ forkDstPrefix/misc/freetype/imgui_freetype.cpp
@@ -40,6 +40,7 @@
 #include FT_MODULE_H            // <freetype/ftmodapi.h>
 #include FT_GLYPH_H             // <freetype/ftglyph.h>
 #include FT_SYNTHESIS_H         // <freetype/ftsynth.h>
+#include FT_OTSVG_H
 
 #ifdef _MSC_VER
 #pragma warning (disable: 4505)     // unreferenced local function has been removed (stb stuff)
@@ -238,7 +239,7 @@ namespace
 
         // Need an outline for this to work
         FT_GlyphSlot slot = Face->glyph;
-        IM_ASSERT(slot->format == FT_GLYPH_FORMAT_OUTLINE || slot->format == FT_GLYPH_FORMAT_BITMAP);
+        // IM_ASSERT(slot->format == FT_GLYPH_FORMAT_OUTLINE || slot->format == FT_GLYPH_FORMAT_BITMAP);
 
         // Apply convenience transform (this is not picking from real "Bold"/"Italic" fonts! Merely applying FreeType helper transform. Oblique == Slanting)
         if (UserFlags & ImGuiFreeTypeBuilderFlags_Bold)
@@ -326,7 +327,14 @@ namespace
                         for (uint32_t x = 0; x < w; x++)
                         {
                             uint8_t r = src[x * 4 + 2], g = src[x * 4 + 1], b = src[x * 4], a = src[x * 4 + 3];
-                            dst[x] = IM_COL32(DE_MULTIPLY(r, a), DE_MULTIPLY(g, a), DE_MULTIPLY(b, a), a);
+                            if(a > 0)
+                            {
+                                dst[x] = IM_COL32(DE_MULTIPLY(r, a), DE_MULTIPLY(g, a), DE_MULTIPLY(b, a), a);
+                            }
+                            else
+                            {
+                                dst[x] = 0;
+                            }
                         }
                 }
                 else
@@ -741,6 +749,7 @@ static void* FreeType_Realloc(FT_Memory /*memory*/, long cur_size, long new_size
     return block;
 }
 
+extern "C" SVG_RendererHooks nanosvg_hooks;
 static bool ImFontAtlasBuildWithFreeType(ImFontAtlas* atlas)
 {
     // FreeType memory management: https://www.freetype.org/freetype2/docs/design/design-4.html
@@ -758,6 +767,7 @@ static bool ImFontAtlasBuildWithFreeType(ImFontAtlas* atlas)
 
     // If you don't call FT_Add_Default_Modules() the rest of code may work, but FreeType won't use our custom allocator.
     FT_Add_Default_Modules(ft_library);
+    FT_Property_Set(ft_library, "ot-svg", "svg-hooks", &nanosvg_hooks);
 
     bool ret = ImFontAtlasBuildWithFreeTypeEx(ft_library, atlas, atlas->FontBuilderFlags);
     FT_Done_Library(ft_library);
